<?xml version="1.0" encoding="UTF-8" ?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                       http://maven.apache.org/xsd/maven-4.0.0.xsd">
   <modelVersion>4.0.0</modelVersion>
   <groupId>bradleyross.pom-tutorials</groupId>
   <artifactId>pom-tutorials-parent</artifactId>
   <version>0.0.1-SNAPSHOT</version>   
   <packaging>pom</packaging>
   <modules>
      <module>tutorials-webapp1</module>
      <module>tutorials-common</module>
      <module>tutorials-launch</module>
      <module>tutorials-log4j2</module>
      <module>tutorials-log4j1</module>
   </modules>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>
<!-- 
  http://stackoverflow.com/questions/15886209/maven-is-not-working-in-java-8-when-javadoc-tags-are-incomplete   
  The Maven javadoc tool for Java 8 is very picky about correctly formed
  HTML tags.  This option turns off the checking for Java 8.
  
  In creating a range of versions, a square bracket means inclusive while
  a parenthesis means exclusive.
  [1.8,) means every version from 1.8 onward
  [1.8,1.9) means every version greater or equal to 1.8 and less than 1.9.
  -->
	<profiles>
  		<profile>
    		<id>doclint-java8-disable</id>
    		<activation>
      			<jdk>[1.8,)</jdk>
    		</activation>
    		<!--  <additionalparam>-Xdoclint:none</additionalparam> -->
			<reporting>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
						<version>2.10.3</version>
						<configuration>
							<linksource>true</linksource>
							<quiet>true</quiet>
						</configuration>
					</plugin>
				</plugins>
			</reporting>
		</profile>
	</profiles>
	<reporting>
		<!-- 
			It appears that maven-javadoc-plugin:2.10.3 has a dependency on log4j-1.2.14
		 -->
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
						<version>2.10.3</version>
						<configuration>
							<linksource>true</linksource>
							<quiet>true</quiet>
						</configuration>
					</plugin>
				</plugins>
			</reporting>
	<build>
		<plugins>
			<plugin>
<!--  
   http://stackoverflow.com/questions/567996/can-maven-collect-all-the-dependent-jars-for-a-project-to-help-with-application 
   This option places copies of all of the jar files in the target directory.
-->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.10</version>
				<configuration>
					<quiet>true</quiet>
					<outputDirectory>
						${project.build.directory}/dependencies
					</outputDirectory>
				</configuration>
			</plugin>
			<plugin>
				<!-- 
				      Some of the J2EE technologies require JRE 1.6
				 -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.5.1</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
				
			</plugin>
		</plugins>
	</build>
	<!-- 
		This dependency is required because the maven-javadoc-plugin:2.10.3 has
		a dependency on maven-core:2.2.1, which has direct or indirect
		dependencies on sl4j-nop:1.5.3 and slf4j-jdk14:1.5.6.
		
		maven-core:2.2.1 : slf4j-jdk14:1.5.6
		maven-core:2.2.1 : wagon-webdav-jackrabbit:1.0-beta-6 : slf4j-nop:1.5.3
		
		These dependencies caused conflicts when dealing with various logging
		schemes that used different jar files.
		
		By inserting a dependency on maven-core:3.3.9, it forces the system
		to use maven-core:3.3.9 instead of maven-core:2.2.1.  
	 -->
	<dependencies>
		<dependency>
			<groupId>org.apache.maven</groupId>
			<artifactId>maven-core</artifactId>
			<version>3.3.9</version>
		</dependency>
	</dependencies>
</project>