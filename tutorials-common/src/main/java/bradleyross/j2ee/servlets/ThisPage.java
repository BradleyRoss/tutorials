package bradleyross.j2ee.servlets;
import java.io.StringWriter;
import java.io.PrintWriter;
import java.io.IOException;
import java.sql.Date;
import java.util.Vector;
import java.util.Enumeration;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletInputStream;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import bradleyross.library.database.DatabaseProperties;
import bradleyross.library.helpers.GenericPrinter;
import bradleyross.library.helpers.StringHelpers;
/**
 * Used by code for servlets to pass information about a specific 
 * HTTP request.
 * 
 * @see bradleyross.j2ee.servlets.UploadServlet.ThisPage
 * 
 * @author Bradley Ross
 *
 */
public class ThisPage 
{
	/**
	 * Request object.
	 */
	private HttpServletRequest request = null;
	/**
	 * Response object.
	 */
	private HttpServletResponse response = null;
	/**
	 * Servlet configuration.
	 */
	protected ServletConfig config = null;
	/**
	 * Application (context) configuration.
	 */
	protected ServletContext context = null;
	/**
	 * Input stream from HTTP request.
	 * @see #getInputStream()
	 */
	protected ServletInputStream input = null;
	/**
	 * Used to pass information on database connection.
	 * @see #setDatabase(DatabaseProperties)
	 * @see #getDatabase()
	 */
	protected DatabaseProperties data = null;
	/**
	 * Starting date of date range.
	 * @see #setStartDate(Date)
	 * @see #getStartDate()
	 */
	protected Date startDate = null;
	/**
	 * Ending date of date range.
	 * @see #setEndDate(Date)
	 * @see #getEndDate()
	 */
	protected Date endDate = null;
	/**
	 * PrintWriter object for response.
	 * 
	 * <p>The value is only set when the method
	 *    {@link #getWriter()} is called.</p>
	 * @see #getWriter()
	 */
	private PrintWriter writer = null;
	/**
	 * Used internally to store information for page.
	 * 
	 */
	private StringWriter stringWriter = null;
	/**
	 * This is the printer object that will be used by servlet code.  
	 * <p>The
	 *    material is passed to a StringWriter that can be cleared and
	 *    rewritten before sending the material to the response object.</p>
	 * @see #getPrinter()
	 */
	private GenericPrinter printer = null;
	/**
	 * Object for sending information to HTTP response
	 * as a binary stream.
	 * 
	 * @see #getOutputStream()
	 */
	private ServletOutputStream outputStream = null;
	/**
	 * A list of warning or error messages that will appear
	 * on the web page generated by the servlet.
	 * 
	 * <p>The text of the messages are processed by
	 *    {@link StringHelpers#escapeHTML(String) } before
	 *    being sent to the web page.  The surrounding tags
	 *    will also have to be added.</p>
	 * <p>The error page is generated by calling
	 *    {@link #errorMessage()}.</p>
	 */
	protected Vector<String> messageList = null;
	/**
	 * Cancel processing if set to true.
	 * 
	 * <p>The flag is set when 
	 *    {@link #errorMessage()} or {@link #sendContents() }
	 *    is called.</p>
	 */
	protected boolean terminateRequest = false;
	/**
	 * Get the value of terminateRequest
	 * 
	 * @see #terminateRequest
	 * @return Value of flag
	 */
	public boolean getTerminateRequest()
	{
		return terminateRequest;
	}
	/**
	 * Clear the contents of the StringWriter object.
	 */
	public void clearWriter()
	{
		stringWriter = new StringWriter();
		printer = new GenericPrinter(stringWriter);
	}
	/**
	 * Obtains the PrintWriter object for sending the page contents
	 * as a character string.
	 * <p>The only public means of calling this method is to use
	 *    {@link #sendContents()}.</p>
	 * @return PrintWriter object
	 * @throws IOException
	 */
	protected PrintWriter getWriter() throws IOException
	{
		if (writer == null)
		{
			writer = response.getWriter();
		}
		return writer;
	}
	/**
	 * Send the contents of the StringWriter object to
	 * the response object.
	 */
	public void sendContents() throws IOException
	{
		getWriter().write(stringWriter.toString());
		terminateRequest = true;
	}
	/**
	 * Default constructor added to allow subclassing.
	 */
	public ThisPage()
	{ ; }
	public ThisPage(HttpServletRequest requestValue, HttpServletResponse responseValue, ServletConfig configValue)
	throws IOException
	{
		request = requestValue;
		response = responseValue;
		config = configValue;
		context = config.getServletContext();		
		stringWriter = new StringWriter();
		printer = new GenericPrinter(stringWriter);
		messageList = new Vector<String>();	
	}
	/**
	 * Set the object containing database connection properties.
	 * @see #data
	 * @param databaseValue Object containing database properties
	 */
	public void setDatabase (DatabaseProperties databaseValue)
	{
		data = databaseValue;
	}
	/**
	 * Get the object containing database connection properties.
	 * @see #data
	 * @return Object containing database connection properties
	 */
	public DatabaseProperties getDatabase()
	{
		return data;
	}
	/**
	 * Gets request object.
	 * @return Request object
	 */
	public HttpServletRequest getRequest()
	{
		return request;
	}
	/**
	 * Gets response object.
	 * @return Response object
	 */
	public HttpServletResponse getResponse()
	{
		return response;
	}
	/**
	 * Get servlet configuration.
	 * <p>Parameters that are specified for a single servlet belong to
	 *    this object.</p>
	 * @return Servlet configuration object
	 */
	public ServletConfig getConfig()
	{
		return config;
	}
	/**
	 * Get application context.
	 * <p>Parameters that belong to the entire application belong to
	 *    this object.</p>
	 *    @see #context
	 * @return Application context
	 */
	public ServletContext getContext()
	{
		return context;
	}
	/**
	 * Return the input object obtaining information from the
	 * HTTP request.
	 * 
	 * @see #input
	 * @return ServletInputStream object
	 */
	public ServletInputStream getInputStream()
	{
		return input;
	}
	/**
	 * Obtain the output stream for sending information to the
	 * browser as a stream of bytes.  
	 * 
	 * <p>If this method is called,
	 *    the {@link #sendContents()} and {@link #errorMessage()}
	 *    messages can not be used.</p>
	 *    
	 * @return ServletOutputStream object
	 * @throws IOException
	 */
	public ServletOutputStream getOutputStream() throws IOException
	{
		if (outputStream == null)
		{
			outputStream = response.getOutputStream();
		}
		return outputStream;
	}
	/**
	 * Get the generic printer object.
	 * @see #printer
	 * @return GenericPrinter object
	 */
	public GenericPrinter getPrinter()
	{
		if (stringWriter == null)
		{
			stringWriter = new StringWriter();
		}
		if (printer == null)
		{
			printer = new GenericPrinter(stringWriter);
		}
		return printer;
	}
	/**
	 * Returns list of messages for the error page.
	 * @return List of messages
	 */
	public Vector<String> getMessageList()
	{
		return messageList;
	}
	/**
	 * Add a message to the list of messages for the
	 * error page.
	 * 
	 * @see #messageList
	 * @param value Message to be added
	 */
	public void addMessage(String value)
	{
		messageList.add(value);
	}
	/**
	 * Adds a description of an exception to the list
	 * of messages for the error page.
	 * 
	 * @see #messageList
	 * 
	 * @param e Exception to be described
	 */
	public void addException(Exception e)
	{
		StringWriter str = new StringWriter();
		PrintWriter p = new PrintWriter(str);
		p.println(e.getClass().getName() + " " + e.getMessage());
		e.printStackTrace(p);
		messageList.add(str.toString());
	}
	/**
	 * Generates an error page based on the calls to the
	 * addMessage and addException methods.
	 * 
	 * @see #addMessage(String)
	 * @see #addException(Exception)
	 * @throws IOException
	 */
	public void errorMessage() throws IOException
	{
		clearWriter();
		GenericPrinter out = getPrinter();
		out.println("<html><head><title>Error encountered</title></head>");
		out.println("<body><h1>Error encountered</h1>");
		messageList.trimToSize();
		out.print("<p>Please print this page for aid in debugging.  This page contains " +
			" a list of actions taken by the servlet as well as the actual error message.</p>");
		out.println("<h2>Start of messages</h2>");
		int size = messageList.size();
		if (size > 0)
		{
			out.println("<ul>");
			for (int i = 0; i < size; i++)
			{
				out.println("<li>" + StringHelpers.escapeHTML(messageList.elementAt(i)) + "</li>");
			}
			out.println("</ul>");
		}
		else
		{
			out.println("<p>There are no messages waiting</p>");
		}
		out.println("<h2>List of parameters</h2>");
		Enumeration<?> nameList = request.getParameterNames();
		while (nameList.hasMoreElements())
		{
			String name = (String) nameList.nextElement();
			out.println("<p>" + 
					StringHelpers.escapeHTML(name + " = " + request.getParameter(name)) +"</p>");
		}
		out.println("</body></html>");
		sendContents();
		terminateRequest = true;
		return;
	}
	/**
	 * Set start date of date range.
	 * @see #startDate
	 * @param value Date to be used for start of date range
	 */
	public void setStartDate(Date value)
	{
		startDate = value;
	}
	/**
	 * Return start date for date range.
	 * @see #startDate
	 * @return Start of date range
	 */
	public Date getStartDate()
	{
		return startDate;
	}
	/**
	 * Set end date of date range.
	 * @see #endDate
	 * @param value Date to be used for end of date range
	 */
	public void setEndDate(Date value)
	{
		endDate = value;
	}
	/**
	 * Return end date of date range.
	 * @see #endDate
	 * @return End date of date range
	 */
	public Date getEndDate()
	{
		return endDate;
	}
	/**
	 * Controls amount of diagnostic output.
	 * 
	 * <p>More positive values mean more diagnostic listings.</p>
	 */
	protected int debugLevel = 0;
	/**
	 * Gets value of debugLevel.
	 * 
	 * @see #debugLevel
	 * @return Value of debugLevel
	 */
	public int getDebugLevel()
	{
		return debugLevel;
	}
	/**
	 * Sets value of debugLevel
	 * @see #debugLevel
	 * @param value Value to be used
	 */
	public void setDebugLevel(int value)
	{
		debugLevel = value;
	}
	/**
	 * Indicates that the document should be displayed in the browser if 
	 * possible.
	 * 
	 * @see #mode
	 */
	public static final int NORMAL = 0;
	/**
	 * Indicates that the document should be downloaded to the
	 * client machine.
	 * 
	 * @see #mode
	 */
	public static final int DOWNLOAD = 1;
	/**
	 * Indicates the mode of operation.  The two possible values
	 * are defined by the static integer values NORMAL and DOWNLOAD.
	 */
	protected int mode = 0;
	/**
	 * Contains the MIME code for the document to be displayed.
	 */
	protected String mimeType = null;
	/** 
	 * The byte array contains the contents of the document to be displayed.
	 */
	protected byte[] contents = null;
	/**
	 * File name to be associated with the download.
	 */
	protected String fileName = null;
	/**
	 * Set the MIME code for the document.
	 * 
	 * @param value MIME code
	 */
	public void setMimeType (String value)
	{
		mimeType = value;
	}
	/**
	 * Get the MIME code for the document.
	 * 
	 * @return MIME code
	 */
	public String getMimeType()
	{
		return mimeType;
	}
	/**
	 * Set the filename associated with the item to be downloaded.
	 * 
	 * @param value File name
	 */
	public void setFileName (String value)
	{
		fileName = value;
	}
	/**
	 * Get the filename associated with the item to be downloaded.
	 * @return File name
	 */
	public String getFileName()
	{
		return fileName;
	}
	/**
	 * Get the byte array to be used to display the downloaded item.
	 * 
	 * @return Contents of downloaded item
	 */
	public byte[] getContents()
	{
		return contents;
	}
	/**
	 * Set the byte array to be used to display the downloaded item.
	 * 
	 * @param value Contents of downloaded item
	 */
	public void setContents(byte value[])
	{
		contents = value;
	}
	/**
	 * Set the mode of operation
	 * @param value Mode of operation
	 * @throws IOException
	 */
	public void setMode (int value) throws IOException
	{
		if (mode != NORMAL && mode != DOWNLOAD)
		{
			addMessage("Illegal mode of operation");
			throw new IOException("Illegal mode of operation");
		}
		mode = value;
	}
	/**
	 * Get the mode of operation.
	 * 
	 * @return Mode of operation
	 */
	public int getMode ()
	{
		return mode;
	}
	/**
	 * Address to be used for redirecting servlet.
	 */
	protected String redirectAddress = null;
	/**
	 * Set redirectAddress.
	 * @see #redirectAddress
	 * @param value Value to be used
	 */
	public void setRedirectAddress(String value)
	{
		redirectAddress = value;
	}
	/**
	 * Get redirectAddress.
	 * @see #redirectAddress
	 * @return Value of redirectAddress
	 */
	public String getRedirectAddress()
	{
		return redirectAddress;
	}
}
